import boto3
from botocore.exceptions import ClientError


# Function to delete the endpoint and its configuration
def delete_endpoint_and_config(endpoint_name):
    sagemaker_client = boto3.client('sagemaker')
    try:
        # Describe the endpoint to get the endpoint configuration name
        endpoint_info = sagemaker_client.describe_endpoint(EndpointName=endpoint_name)
        endpoint_config_name = endpoint_info['EndpointConfigName']
        
        # Delete the endpoint
        sagemaker_client.delete_endpoint(EndpointName=endpoint_name)
        print("Endpoint deleted successfully.")
        
        # Delete the endpoint configuration
        sagemaker_client.delete_endpoint_config(EndpointConfigName=endpoint_config_name)
        print("Endpoint configuration deleted successfully.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'ValidationException':
            print(f"Endpoint or configuration not found: {e}")
        else:
            print(f"Error deleting endpoint or configuration: {e}")


# Function to delete the model
def delete_model(model_name):
    sagemaker_client = boto3.client('sagemaker')
    try:
        # Delete the model
        sagemaker_client.delete_model(ModelName=model_name)
        print("Model deleted successfully.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'ValidationException':
            print(f"Model not found: {e}")
        else:
            print(f"Error deleting model: {e}")


# Deploy the model
xgb_predictor = xgb.deploy(initial_instance_count=1, instance_type='ml.m4.xlarge')


# Prepare the test data
test_data_array = test_data.drop(['y_no', 'y_yes'], axis=1).values


# Configure the predictor with the correct serializer
xgb_predictor.serializer = CSVSerializer()


# Make predictions on the test data
predictions = xgb_predictor.predict(test_data_array).decode('utf-8')


# Convert the predictions string to a NumPy array
predictions_array = np.fromstring(predictions[1:], sep=',')


# Print the shape of the predictions array
print(predictions_array.shape)


# Evaluate the model performance
cm = pd.crosstab(index=test_data['y_yes'], columns=np.round(predictions_array), rownames=['Observed'], colnames=['Predicted'])
tn = cm.iloc[0,0]; fn = cm.iloc[1,0]; tp = cm.iloc[1,1]; fp = cm.iloc[0,1]; p = (tp+tn)/(tp+tn+fp+fn)*100
print("\n{0:<20}{1:<4.1f}%\n".format("Overall Classification Rate: ", p))
print("{0:<15}{1:<15}{2:>8}".format("Predicted", "No Purchase", "Purchase"))
print("Observed")
print("{0:<15}{1:<2.0f}% ({2:<}){3:>6.0f}% ({4:<})".format("No Purchase", tn/(tn+fn)*100,tn, fp/(tp+fp)*100, fp))
print("{0:<16}{1:<1.0f}% ({2:<}){3:>7.0f}% ({4:<}) \n".format("Purchase", fn/(tn+fn)*100,fn, tp/(tp+fp)*100, tp))


# Get the model name(s) before deleting the endpoint
model_names = xgb_predictor._get_model_names()


# Clean up resources with error handling
delete_endpoint_and_config(xgb_predictor.endpoint_name)


# Delete the model(s)
for model_name in model_names:
    delete_model(model_name)
